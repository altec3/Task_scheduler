name: Build and deploy thesis_project
run-name: Push to 'main' branch by ${{ github.actor }}

on:
  push:
    branches:
      - main
jobs:

  tests:
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: '3.10'
      POETRY_VERSION: 1.3.1
      DJANGO_SK: django_secret_key
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: 127.0.0.1
      VK_OAUTH2_KEY: 12345678
      VK_OAUTH2_SECRET: vk_oauth2_secret
      TG_TOKEN: tg_token
    services:
      postgres:
        image: postgres:12.4-alpine
        env:
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 3s
          --health-timeout 3s
          --health-retries 5
        ports:
          - "5432:5432"
    steps:
      -
        name: clone code
        uses: actions/checkout@v3
      -
        name: install Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      -
        name: install Poetry ${{ env.POETRY_VERSION }}
        run: |
          python -m pip install poetry==${{ env.POETRY_VERSION }}
      -
        name: install dependencies
        run: |
          python -m poetry install --with test
      -
        name: run tests
        working-directory: ./todolist
        run: |
          python -m poetry run pytest \
            --junitxml=pytest.xml \
            --cov-report=term-missing:skip-covered \
            --cov=todolist \
          tests/ | tee pytest-coverage.txt
      -
        name: pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./todolist/pytest-coverage.txt
          junitxml-path: ./todolist/pytest.xml

  docker_build_and_push:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      -
        name: clone code
        uses: actions/checkout@v3
      -
        name: docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/thesis
      -
        name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      -
        name: build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          target: dep_image
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: docker_build_and_push
    steps:
      -
        name: clone code
        uses: actions/checkout@v2
      -
        name: decrypt .env
        uses: anthonykgross/ansible-vault-cli-github-action@v1
        with:
          vault_key: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
          command: "ansible-vault decrypt deploy/.env"
      -
        name: copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          source: "deploy/*"
          target: "thesis_project_ci"
          strip_components: 1
      -
        name: deploy app
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          script: |
            cd thesis_project_ci
            docker compose pull
            docker compose up -d
      -
        name: clear trash
        if: always()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          script: |
            docker system prune -a -f

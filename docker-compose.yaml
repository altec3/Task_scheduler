version: '3.8'

services:

  db:
    image: postgres:12.4-alpine
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - psql_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    ports:
    - "5432:5432"

  collectstatic:
    build:
      context: .
      target: dev_image
    env_file:
      - ./.env
    environment:
      DB_HOST: db
    volumes:
      - static:/server/static
    depends_on:
      db:
        condition: service_healthy
    command: ["python3", "manage.py", "collectstatic", "-c", "--no-input"]

  api:
    build:
      context: .
      target: dev_image
    env_file:
      - ./.env
    restart: always
    environment:
      DB_HOST: db
    volumes:
      - ./todolist:/server:ro
    ports:
      - "8000:8000"
    depends_on:
      collectstatic:
        condition: service_completed_successfully
    command: ["python3", "manage.py", "runserver", "0.0.0.0:8000"]

  bot:
    build:
      context: .
      target: dev_image
    env_file:
      - ./.env
    environment:
      DB_HOST: db
    depends_on:
      api:
        condition: service_started
    command: ["python3", "manage.py", "runbot"]

  front:
    image: altec3/thesis-front:latest
    volumes:
      - static:/usr/share/nginx/html/static/
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_started
      bot:
        condition: service_started

volumes:
  psql_data:
    driver: local
  static:
    driver: local
